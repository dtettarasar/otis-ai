  <style>

    .keyword-bdge {
      font-size: 0.8rem;
      padding: 5px;
      margin: 5px;
    }

    .keyword-bdge p {
      margin:4px;
    }

    #keywords_params {
      display:none;
    }

    .post-submit-content {
      display: none;
    }

  </style>
  
  <!-- Modal -->
  <div data-bs-backdrop='static' class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLabel">Generate Text with AI</h5>
          <button type="button" class="btn-close pre-submit-content" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">

          <div class="pre-submit-content">

            <strong>What your article should be about?</strong>
          Use the fields below to tell us about your article. 

            <form id="trigger-creation-form" action="/article/create-ai" method="post">

              <!--
              <div class="form-group mt-2">
                  <label for="title">Title</label>
                  <input value="" required type="text" name="title" id="title" class="form-control">
              </div>
              -->
              
              <div class="form-group mt-2">
                  <label for="description">Description</label>
                  <textarea name="description" id="description" class="form-control"></textarea>
              </div>

              <div class="form-group mt-2 mb-2">
                <label for="keywords">Keywords</label>
                <input value="" type="text" name="title" id="keywords" class="form-control">
              </div>

              <div class="d-flex align-items-center justify-content-start flex-wrap" id="keywords-container">

              </div>

              <!-- this field is used to store the keywords value and pass to back end -->
              <textarea name="keywords_params" id="keywords_params" class="form-control"></textarea>

              <p class="text-primary mt-2">Your have <strong><%= credit %></strong> credit(s).</p>

              <% if(credit <= 0){ %>

                <p class="text-danger mt-2" ><strong>You need credits to generate articles with AI</strong></p>

                <a class="btn btn-primary mt-2" href="/user/add-credits">Buy credits here</a>

              <% } %>
              

              <% if(credit > 0){ %>
                <button id="add-kywrd-btn" type="button" class="btn btn-secondary mt-2">Add keywords</button>
                <a id="trigger-creation-btn" type="button" class="btn btn-success mt-2">Use 1 credit to generate an article</a>
              <% } else{ %>  
                <button disabled id="add-kywrd-btn" type="button" class="btn btn-secondary mt-2">Add keywords</button>
                <button disabled class="btn btn-success mt-2">Use 1 credit to generate an article</button>
              <% } %>

            </form>

          </div>

          <div class="post-submit-content">
            <p>Article in creation, please wait :)</p>
          </div>
          

        </div>
        <div class="modal-footer pre-submit-content">
          <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
          <!-- <button id="modal-validate-btn" type="button" class="btn btn-primary">Save changes</button>-->
        </div>
      </div>
    </div>
  </div>

<script>

    // html elements
    const addKeyWrdBtn = document.querySelector("#add-kywrd-btn");
    const addKeyWrdField = document.querySelector("#keywords");
    const desccriptionField = document.querySelector("description");
    const keywordsContainer = document.querySelector("#keywords-container");
    const keywordsParamsField = document.querySelector("#keywords_params");
    const submitBtn = document.querySelector('#trigger-creation-btn');
    const preSubmitContent = document.querySelectorAll('.pre-submit-content');
    const postSubmitContent = document.querySelectorAll('.post-submit-content');
    const formElement = document.querySelector("#trigger-creation-form");

    const keywordsLimit = 5;
    let keyWordIdCount = 0;

    // Todo build a regex to exlude keywords only made with special characters

    const keywordObj = {};

    const addKeyWords = () => {

      /*
      console.log("init get keywords button");
      console.log(Object.keys(keywordObj).length);
      */

      const simplifiedKeyWord = addKeyWrdField.value.replace(/[^a-zA-Z0-9 ]/g, '').toLowerCase();

      if (Object.keys(keywordObj).length == keywordsLimit) {

        (console.log(`you can add a maximum of ${keywordsLimit} keywords`));

      } else if (!simplifiedKeyWord) {

        console.log('field should not be empty')

      } else {

        const keywordIdVal = `keyword-tag-${keyWordIdCount}`;
        const tagDivElem = document.createElement("div");
        const tagPElem = document.createElement("p");
        const tagBtnElem = document.createElement("button");
        const tagTxtElem = document.createTextNode(simplifiedKeyWord);

        keywordObj[keywordIdVal] = simplifiedKeyWord;

        tagDivElem.classList.add('badge', 'bg-primary', 'keyword-bdge', 'd-flex', 'flex-row');
        tagBtnElem.classList.add('btn-close');
        tagBtnElem.setAttribute('type', 'button');
        tagBtnElem.setAttribute('aria-label', 'Close');

        tagBtnElem.setAttribute('onclick', `removeKeyword('${keywordIdVal}')`);
        tagDivElem.setAttribute('id', keywordIdVal);

        tagPElem.appendChild(tagTxtElem);
        tagDivElem.appendChild(tagPElem);
        tagDivElem.appendChild(tagBtnElem);
        keywordsContainer.appendChild(tagDivElem);


        addKeyWrdField.value = "";
        keywordsParamsField.value = JSON.stringify(keywordObj);

        keyWordIdCount++;

      } 
      
      //console.log(keywordsParamsField.value);

    }

    const removeKeyword = (keywordIdVal) => {

      const keywordElem = document.querySelector(`#${keywordIdVal}`);
      keywordElem.remove();
      delete keywordObj[keywordIdVal];
      keywordsParamsField.value = JSON.stringify(keywordObj);
      console.log(keywordsParamsField.value);

    }

    const changeModalContentOnSubmission = () => {

      preSubmitContent.forEach(element => {
        element.style.display = "none";
      });

      postSubmitContent.forEach(element => {
        element.style.display = "block";
      })

    }

    submitBtn.addEventListener("click", () => {

      console.log('init submission');

      console.log("check keywords params length");

      console.log(Object.keys(keywordObj).length);

      const keywordsOk = Object.keys(keywordObj).length > 0 && Object.keys(keywordObj).length <= keywordsLimit;

      if (keywordsOk) {

        //changeModalContentOnSubmission();
        //formElement.submit();

      } else {

        console.log(`give between 1 & ${keywordsLimit}`);

      }


      //formElement.submit();

    });

    //submitBtn.addEventListener("click", changeModalContentOnSubmission);

    addKeyWrdBtn.addEventListener("click", addKeyWords);

</script>